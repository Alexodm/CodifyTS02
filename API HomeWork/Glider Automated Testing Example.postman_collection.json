{
	"info": {
		"_postman_id": "c0e88ee2-046a-43e4-b8de-ceadb259a72b",
		"name": "Glider Automated Testing Example",
		"description": "Automated tests for Glider",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "F02.Flight Booking instant 2ADT Return",
			"item": [
				{
					"name": "Glider: Search Flight Offers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"var twoMonthFromNow = new Date((+new Date()) + 2 * 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"travel_date\", oneMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"return_date\", twoMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"origin\", \"LHR\");",
									"pm.collectionVariables.set(\"destination\", \"YVR\");",
									"",
									"const passengers =",
									"  [",
									"    {",
									"      \"type\": \"ADT\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marley\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Bob\"",
									"      ],",
									"      \"birthdate\": \"1980-03-21T00:00:00Z\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"ADT\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marleyyy\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Bobby\"",
									"      ],",
									"      \"birthdate\": \"1980-03-21T00:00:00Z\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"CHD\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marleyyy\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Child\"",
									"      ],",
									"      \"birthdate\": \"2015-03-21\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    }",
									"  ];",
									"pm.collectionVariables.set(\"passengers\", JSON.stringify(passengers));",
									"",
									"",
									"const passengersTypes = passengers.reduce((acc, passenger) => {",
									"  const ptc = passenger.type;",
									"  if (ptc in acc) {",
									"    acc[ptc].count++;",
									"  } else {",
									"    acc[ptc] = {",
									"      type: ptc,",
									"      count: 1",
									"    }",
									"  }",
									"  return acc;",
									"}, {});",
									"pm.collectionVariables.set(\"passengersTypes\", JSON.stringify(Object.values(passengersTypes)));",
									"pm.variables.set('seats', \"[]\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonSearchResults = pm.response.json();",
									"var offerIds = Object.keys(jsonSearchResults.offers);",
									"var combinations = Object.keys(jsonSearchResults.itineraries.combinations);",
									"var segments = Object.keys(jsonSearchResults.itineraries.segments);",
									"var pricePlans = Object.keys(jsonSearchResults.pricePlans);",
									"var passengers = Object.keys(jsonSearchResults.passengers);",
									"",
									"",
									"pm.test(\"Check for offers presence\", function () {",
									"    // Check the offers",
									"    pm.expect(offerIds.length).to.be.above(0);",
									"",
									"});",
									"",
									"pm.test(\"Check for Combinations presence\", function () {",
									"    pm.expect(combinations.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments presence\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Price Plans presence\", function () {",
									"    pm.expect(pricePlans.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Passengers presence\", function () {",
									"    const definedPassengers = JSON.parse(pm.variables.get(\"passengers\"));",
									"    console.log('definedPassengers >>>', definedPassengers);",
									"",
									"    //Apply defined passengers to the provided keys",
									"    let indexedPassengers = definedPassengers.reduce((acc, pax) => {",
									"        // Search a key with correct passenger type",
									"        for (let paxIndex = 0; paxIndex < passengers.length; paxIndex++) {",
									"            let key = passengers[paxIndex];",
									"            if (jsonSearchResults.passengers[key].type == pax.type) {",
									"                // Only add if the key is not used yet",
									"                if (!(key in acc)) {",
									"                    acc[key] = pax;",
									"                    return acc;",
									"                }",
									"            }",
									"        }",
									"    }, {});",
									"",
									"    pm.collectionVariables.set(\"indexedPassengers\", JSON.stringify(indexedPassengers));",
									"    //console.log(indexedPassengers);",
									"});",
									"",
									"",
									"// Check the offers",
									"offerIds.forEach(offerId => {",
									"    let offer = jsonSearchResults.offers[offerId];",
									"    let offerFlights = [];",
									"",
									"    // Check price consistency",
									"    pm.test(`Offer #${offerId}: Check Price`, function () {",
									"        let offerPrice = offer.price;",
									"        pm.expect(offerPrice).to.have.property('currency');",
									"        pm.expect(offerPrice).to.have.property('public');",
									"        pm.expect(offerPrice).to.have.property('taxes');",
									"        pm.expect(Number(offerPrice.public)).to.be.above(Number(offerPrice.taxes));",
									"    });",
									"",
									"",
									"    // Check the price plans",
									"    pm.test(`Offer #${offerId}: Check Price Plans`, function () {",
									"        let offerPricePlans = Object.keys(offer.pricePlansReferences);",
									"        pm.expect(offerPricePlans.length).to.be.above(0);",
									"",
									"        offerPricePlans.forEach(offerPricePlanKey => {",
									"            // Check the price plan is in the list",
									"            pm.expect(pricePlans).to.include(offerPricePlanKey);",
									"",
									"            // Check the price plan include a flight list",
									"            pm.expect(offer.pricePlansReferences[offerPricePlanKey]).to.have.property('flights');",
									"            let pricePlanFlights = offer.pricePlansReferences[offerPricePlanKey].flights;",
									"            pm.expect(pricePlanFlights.length).to.be.above(0);",
									"            offerFlights.concat(pricePlanFlights);",
									"        });",
									"    });",
									"",
									"    // Check the flights",
									"    pm.test(`Offer #${offerId}: Check Flight Presence`, function () {",
									"        offerFlights.forEach(flightKey => {",
									"            pm.expect(combinations).to.include(flightKey);",
									"        });",
									"    });",
									"",
									"    // Offer expiration should be at least 20 min",
									"    pm.test(`Offer #${offerId}: Check Flight Presence`, function () {",
									"        pm.expect(new Date(offer.expiration) - new Date()).to.be.above(20 * 60 * 1000, `Offer ${offerId} expires in less than 20 min`);",
									"    });",
									"",
									"});",
									"",
									"",
									"// Chech Combinations",
									"let nbOutbound = 0;",
									"let nbInbound = 0;",
									"combinations.forEach(combinationKey => {",
									"    let combinationSegments = jsonSearchResults.itineraries.combinations[combinationKey];",
									"",
									"    pm.test(`Flight #${combinationKey}: Check combinations`, function () {",
									"",
									"        // Check the combination includes at least one segment",
									"        pm.expect(combinationSegments.length).to.be.above(0);",
									"",
									"        // Check all segments are defined in the segments section",
									"        combinationSegments.forEach(segmentKey => {",
									"            pm.expect(segments).to.include(segmentKey);",
									"        });",
									"    });",
									"",
									"    // Check the reply matches the origin & destination requested",
									"    pm.test(`Flight #${combinationKey}: Check Segment continuity`, function () {",
									"        let firstSegment = jsonSearchResults.itineraries.segments[combinationSegments[0]];",
									"        let lastSegment = jsonSearchResults.itineraries.segments[combinationSegments[combinationSegments.length - 1]];",
									"        let journeyOrigin = pm.variables.get('origin');",
									"        let journeyDestination = pm.variables.get('destination');",
									"        let isReturn;",
									"",
									"        // Check if we have a inbound or outbound",
									"        pm.expect(firstSegment.origin.iataCode).to.be.oneOf([journeyOrigin, journeyDestination]);",
									"        if (firstSegment.origin.iataCode == journeyOrigin) {",
									"            pm.expect(lastSegment.destination.iataCode).to.be.eq(journeyDestination);",
									"            isReturn = false;",
									"            nbOutbound++;",
									"        } else if (firstSegment.origin.iataCode == journeyDestination) {",
									"            pm.expect(lastSegment.destination.iataCode).to.be.eq(journeyOrigin);",
									"            isReturn = true;",
									"            nbInbound++;",
									"        }",
									"",
									"        // Check for consistent itinerary",
									"        if (combinationSegments.length > 1) {",
									"            let previousSegment = firstSegment;",
									"            for (let segmentIndex = 1; segmentIndex < combinationSegments.length; segmentIndex++) {",
									"",
									"                // Get current Segment",
									"                let segmentKey = combinationSegments[segmentIndex];",
									"                let segment = jsonSearchResults.itineraries.segments[segmentKey];",
									"",
									"                // Check that the segment starts where the previous one stopped",
									"                pm.expect(segment.origin.iataCode).to.be.eq(previousSegment.destination.iataCode, `Segments are not continous for flight ${combinationKey}`);",
									"",
									"                // Check the connexion time does not overlap",
									"                // pm.expect(new Date(segment.departureTime) - new Date(previousSegment.arrivalTime)).to.be.above(15 * 60 * 1000, `${combinationKey} connexion time is too short`);",
									"",
									"                // Prepare for next iteration",
									"                previousSegment = segment;",
									"            }",
									"        }",
									"    });",
									"",
									"});",
									"",
									"pm.test(`Check we have both inbound and outbound flights`, function () {",
									"    pm.expect(nbOutbound).to.be.above(0);",
									"    pm.expect(nbInbound).to.be.above(0);",
									"});",
									"",
									"// Select an offer for the outbound and one for the inbound",
									"let inboundSelected = false;",
									"let outboundSelected = false;",
									"for (let offerId of offerIds) {",
									"    // Get the flights",
									"    let offer = jsonSearchResults.offers[offerId];",
									"    let pricePlanKeys = Object.keys(offer.pricePlansReferences);",
									"    let flights = [];",
									"    for (let pricePlanKey of pricePlanKeys) {",
									"        flights = flights.concat(offer.pricePlansReferences[pricePlanKey].flights);",
									"    }",
									"",
									"    // If there is more than one flight, it is a return offer ",
									"    // We are not interested in this offer for this test case",
									"    if (flights.length > 1) continue;",
									"",
									"    // Get the segments",
									"    let flightCombinationKey = flights[0];",
									"    let segmentKeys = jsonSearchResults.itineraries.combinations[flightCombinationKey];",
									"",
									"    let segments = [];",
									"    for (let segmentKey of segmentKeys) {",
									"        segments.push(jsonSearchResults.itineraries.segments[segmentKey]);",
									"    }",
									"",
									"    // If the flight is an outbound, select it if not yet done",
									"    if ((segments[0].origin.iataCode == pm.variables.get('origin')) && !outboundSelected) {",
									"        pm.collectionVariables.set('offer_id_outbound', offerId);",
									"        pm.collectionVariables.set('offer_items_outbound', JSON.stringify(jsonSearchResults.offers[offerId].offerItems));",
									"        pm.collectionVariables.set('currency', jsonSearchResults.offers[offerId].price.currency);",
									"        pm.collectionVariables.set('amount_outbound', jsonSearchResults.offers[offerId].price.public);",
									"        outboundSelected = true;",
									"    }",
									"",
									"    // If the flight is an outbound, select it if not yet done",
									"    if ((segments[0].origin.iataCode == pm.variables.get('destination')) && !inboundSelected) {",
									"        pm.collectionVariables.set('offer_id_inbound', offerId);",
									"        pm.collectionVariables.set('offer_items_inbound', JSON.stringify(jsonSearchResults.offers[offerId].offerItems));",
									"        //pm.collectionVariables.set('currency_inbound',jsonSearchResults.offers[offerId].price.currency);",
									"        pm.collectionVariables.set('amount_inbound', jsonSearchResults.offers[offerId].price.public);",
									"        inboundSelected = true;",
									"    }",
									"",
									"    // Stop execution if we found both",
									"    if (outboundSelected && inboundSelected) break;",
									"",
									"}",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"pm.collectionVariables.set('amount', Number(",
									"    Number(pm.variables.get('amount_inbound'))",
									"    + Number(pm.variables.get('amount_outbound'))",
									").toFixed(2));",
									"pm.collectionVariables.set('max_amount', Number(",
									"    Number(pm.variables.get('amount')*1.001)",
									").toFixed(2));",
									"console.log(pm.collectionVariables.get('offer_id_inbound'));",
									"console.log(pm.collectionVariables.get('offer_id_outbound'));",
									"",
									"// Merge the offer items",
									"/*",
									"let offerItems = {",
									"    ...JSON.parse(pm.collectionVariables.get('offer_items_outbound')),",
									"    ...JSON.parse(pm.collectionVariables.get('offer_items_inbound')),",
									"}",
									"pm.variables.set('offer_items', JSON.stringify(offerItems)); */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itinerary\": {\n    \"segments\": [\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"departureTime\": \"{{travel_date}}\"\n      },\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"departureTime\": \"{{return_date}}\"\n      }\n    ]\n  },\n  \"passengers\": {{passengersTypes}}\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/search",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"search"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Glider: Get Seat Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"const jsonSeatMap = pm.response.json();",
									"const segments = Object.keys(jsonSeatMap);",
									"let selectedSeat;",
									"",
									"pm.test(\"Check for segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"// Check Segments",
									"segments.forEach(segmentId => {",
									"    // Check prices",
									"    const prices = jsonSeatMap[segmentId].prices;",
									"    const optionCodes = Object.keys(prices);",
									"",
									"    pm.test(\"Check for prices\", function () {",
									"        pm.expect(optionCodes.length).to.be.above(0);",
									"        optionCodes.forEach(optionCode => {",
									"            const optionPrice = prices[optionCode];",
									"            pm.expect(optionPrice).to.have.all.keys('currency', 'public', 'taxes');",
									"            pm.expect(optionPrice.currency).to.be.a('string');",
									"        });",
									"    });",
									"",
									"    // Check Cabins",
									"    const cabins = jsonSeatMap[segmentId].cabins;",
									"",
									"    pm.test(\"Check for cabins\", function () {",
									"        pm.expect(cabins.length).to.be.above(0);",
									"    });",
									"",
									"    cabins.forEach(cabin => {",
									"        // Check Cabin",
									"        pm.test(`Check for cabin ${cabin.name}`, function () {",
									"            pm.expect(cabin).to.have.all.keys(",
									"                'name',",
									"                'layout',",
									"                'firstRow',",
									"                'lastRow',",
									"                'wingFirst',",
									"                'wingLast',",
									"                'exitRows',",
									"                'seats',",
									"            );",
									"        });",
									"",
									"",
									"        pm.test(`Check for seats in cabin ${cabin.name}`, function () {",
									"            const seats = cabin.seats;",
									"            seats.forEach(seat => {",
									"                // Check mandatory keys",
									"                pm.expect(seat).to.include.all.keys(",
									"                    'number',",
									"                    'available',",
									"                );",
									"",
									"                // Check for seat price if available",
									"                if (seat.available) {",
									"                    pm.expect(seat).to.include.all.keys(",
									"                        'optionCode',",
									"                        'characteristics', // Is optional for non-available seats",
									"                    );",
									"",
									"                    pm.expect(optionCodes).to.include(seat.optionCode);",
									"",
									"                    if (!selectedSeat) {",
									"                        selectedSeat = {",
									"                            ...seat,",
									"                            price: prices[seat.optionCode],",
									"                            segment: segmentId,",
									"                        };",
									"                        pm.collectionVariables.set('seats', JSON.stringify([selectedSeat]));",
									"                    }",
									"                }",
									"",
									"            });",
									"        });",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id_outbound}},{{offer_id_inbound}}/seatmap",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id_outbound}},{{offer_id_inbound}}",
								"seatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Glider: Price offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var pricingResults = pm.response.json();",
									"let offerPrice = pricingResults.offer.price.public;",
									"",
									"//",
									"pm.test(\"Check for price change\", function () {",
									"    pm.expect(Number(pricingResults.offer.price.public)).to.be.below(Number(pm.variables.get('max_amount')));",
									"});",
									"",
									"pm.collectionVariables.set('amount', pricingResults.offer.price.public);",
									"pm.collectionVariables.set('offer_id', pricingResults.offerId);",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('PRICE: indexedPassengers >>>>', pm.variables.get('indexedPassengers'));",
									"console.log('PRICE: seats >>>>', pm.variables.get('seats'));",
									"",
									"",
									"const passengers = JSON.parse(pm.variables.get('indexedPassengers'));",
									"pm.collectionVariables.set(\"selectedOptions\", JSON.stringify(",
									"    JSON.parse(pm.variables.get('seats') || \"[]\").map(seat => {",
									"        return {",
									"            code: seat.optionCode,",
									"            seatNumber: seat.number,",
									"            segment: seat.segment,",
									"            passenger: Object.keys(passengers)[1]",
									"        }",
									"    })",
									"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{selectedOptions}}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id_outbound}},{{offer_id_inbound}}/price",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id_outbound}},{{offer_id_inbound}}",
								"price"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"pm.collectionVariables.set(\"balance\", balance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Make Deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/simulateDeposit",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"simulateDeposit"
							]
						},
						"description": "Create a deposit"
					},
					"response": []
				},
				{
					"name": "Simard: Create Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\",\n  \"creditorOrgId\": \"0x94bf5a57b850a35b4d1d7b59f663ce3a8a76fd9928ef2067cc772fc97fb0ad75\",\n  \"expiration\": \"{{guarantee_expiration}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if (currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// Check deposit has been made",
									"pm.test(\"Check for balance update\", function () {",
									"    pm.expect(Number(balance.total).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.total) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"    pm.expect(Number(balance.reserved).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.reserved) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Glider: Create Order from offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var jsonOrderCreationResult = pm.response.json();",
									"",
									"",
									"pm.test(\"Check for orderId\", function () {",
									"    pm.expect(jsonOrderCreationResult.orderId).to.be.a('string');",
									"    pm.collectionVariables.set('order_id', jsonOrderCreationResult.orderId)",
									"});",
									"",
									"pm.test(\"Check for Currency\", function () {",
									"    pm.expect(jsonOrderCreationResult.order.price.currency).to.be.a('string');",
									"    pm.expect(jsonOrderCreationResult.order.price.currency.length).to.eq(3);",
									"    pm.collectionVariables.set('currency', jsonOrderCreationResult.order.price.currency);",
									"});",
									"",
									"pm.test(\"Check for price amount\", function () {",
									"    pm.collectionVariables.set('amount', jsonOrderCreationResult.order.price.public);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offerId\": \"{{offer_id}}\",\n  \"guaranteeId\": \"{{guarantee_id}}\",\n  \"passengers\": {{indexedPassengers}}\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/orders/createWithOffer",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"orders",
								"createWithOffer"
							]
						},
						"description": "Create an order from a received offer"
					},
					"response": []
				},
				{
					"name": "Simard: Get Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees/{{guarantee_id}}",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees",
								"{{guarantee_id}}"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// We do the exact comparison because we have made a deposit in between",
									"pm.expect(Number(balance.total).toFixed(2)).to.eq(Number(previousBalance.total).toFixed(2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				}
			],
			"description": "Tests for Flights"
		},
		{
			"name": "F03.Flight Booking instant 1ADT OneWay",
			"item": [
				{
					"name": "Glider: Search Flight Offers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"travel_date\", oneMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"origin\", \"LHR\");",
									"pm.collectionVariables.set(\"destination\", \"YUL\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonSearchResults = pm.response.json();",
									"var offerIds = Object.keys(jsonSearchResults.offers);",
									"var combinations = Object.keys(jsonSearchResults.itineraries.combinations);",
									"var segments = Object.keys(jsonSearchResults.itineraries.segments);",
									"var pricePlans = Object.keys(jsonSearchResults.pricePlans);",
									"var passengers = Object.keys(jsonSearchResults.passengers);",
									"",
									"",
									"pm.test(\"Check for offers presence\", function () {",
									"    // Check the offers",
									"    pm.expect(offerIds.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Combinations presence\", function () {",
									"    pm.expect(combinations.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments presence\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Price Plans presence\", function () {",
									"    pm.expect(pricePlans.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Passengers presence\", function () {",
									"    pm.expect(passengers.length).to.be.eq(1);",
									"});",
									"",
									"pm.test(\"Check each offer\", function () {",
									"    // Check the offers",
									"    offerIds.forEach(offerId => {",
									"        let offer = jsonSearchResults.offers[offerId];",
									"        let offerFlights = [];",
									"",
									"        // Check price consistency",
									"        let offerPrice = offer.price;",
									"        pm.expect(offerPrice).to.have.property('currency');",
									"        pm.expect(offerPrice).to.have.property('public');",
									"        pm.expect(offerPrice).to.have.property('taxes');",
									"        pm.expect(Number(offerPrice.public)).to.be.above(Number(offerPrice.taxes));",
									"",
									"",
									"        // Check the price plans",
									"        let offerPricePlans = Object.keys(offer.pricePlansReferences);",
									"        pm.expect(offerPricePlans.length).to.be.above(0);",
									"",
									"        offerPricePlans.forEach(offerPricePlanKey => {",
									"            // Check the price plan is in the list",
									"            pm.expect(pricePlans).to.include(offerPricePlanKey);",
									"",
									"            // Check the price plan include a flight list",
									"            pm.expect(offer.pricePlansReferences[offerPricePlanKey]).to.have.property('flights');",
									"            let pricePlanFlights = offer.pricePlansReferences[offerPricePlanKey].flights;",
									"            pm.expect(pricePlanFlights.length).to.be.above(0);",
									"            offerFlights.concat(pricePlanFlights);",
									"        });",
									"",
									"        // Check the flights",
									"        offerFlights.forEach(flightKey => {",
									"            pm.expect(combinations).to.include(flightKey);",
									"        });",
									"",
									"        // Offer expiration should be at least 20 min",
									"        pm.expect(new Date(offer.expiration) - new Date()).to.be.above(20 * 60 * 1000, `Offer ${offerId} expires in less than 20 min`);",
									"",
									"    });",
									"});",
									"",
									"pm.test(\"Check each flight (as one way)\", function () {",
									"    combinations.forEach(combinationKey => {",
									"        let combinationSegments = jsonSearchResults.itineraries.combinations[combinationKey];",
									"",
									"        // Check the combination includes at least one segment",
									"        pm.expect(combinationSegments.length).to.be.above(0);",
									"",
									"        // Check all segments are defined in the segments section",
									"        combinationSegments.forEach(segmentKey => {",
									"            pm.expect(segments).to.include(segmentKey);",
									"        });",
									"",
									"        // Check the reply matches the origin & destination requested",
									"        let firstSegment = jsonSearchResults.itineraries.segments[combinationSegments[0]];",
									"        let lastSegment = jsonSearchResults.itineraries.segments[combinationSegments[combinationSegments.length - 1]];",
									"        pm.expect(firstSegment.origin.iataCode).to.be.eq(pm.variables.get('origin'));",
									"        pm.expect(lastSegment.destination.iataCode).to.be.eq(pm.variables.get('destination'));",
									"",
									"        // Check for consistent itinerary",
									"        if (combinationSegments.length > 1) {",
									"            let previousSegment = firstSegment;",
									"            for (let segmentIndex = 1; segmentIndex < combinationSegments.length; segmentIndex++) {",
									"",
									"                // Get current Segment",
									"                let segmentKey = combinationSegments[segmentIndex];",
									"                let segment = jsonSearchResults.itineraries.segments[segmentKey];",
									"",
									"                // Check that the segment starts where the previous one stopped",
									"                pm.expect(segment.origin.iataCode).to.be.eq(previousSegment.destination.iataCode, `Segments are not continous for flight ${combinationKey}`);",
									"",
									"                // Check the connexion time does not overlap",
									"                pm.expect(new Date(segment.departureTime) - new Date(previousSegment.arrivalTime)).to.be.above(15 * 60 * 1000, `${combinationKey} connexion time is too short`);",
									"",
									"                // Prepare for next iteration",
									"                previousSegment = segment;",
									"            }",
									"        }",
									"",
									"",
									"    });",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"// Select an offer",
									"pm.collectionVariables.set('offer_id', offerIds[0]);",
									"pm.collectionVariables.set('offer_items', JSON.stringify(jsonSearchResults.offers[offerIds[0]].offerItems));",
									"pm.collectionVariables.set('currency', jsonSearchResults.offers[offerIds[0]].price.currency);",
									"pm.collectionVariables.set('amount', jsonSearchResults.offers[offerIds[0]].price.public);",
									"pm.collectionVariables.set('max_amount', Number( Number(pm.variables.get('amount')*1.001)));",
									"pm.collectionVariables.set('passengers', JSON.stringify(jsonSearchResults.passengers));",
									"",
									"//console.log(pm.collectionVariables.get('offer_id'));",
									"//console.log(pm.collectionVariables.get('offer_items'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itinerary\": {\n    \"segments\": [\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"departureTime\": \"{{travel_date}}\"\n      }\n    ]\n  },\n  \"passengers\": [\n    {\n      \"type\": \"ADT\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/search",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"search"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Glider: Get Seat Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"const jsonSeatMap = pm.response.json();",
									"const segments = Object.keys(jsonSeatMap);",
									"let selectedSeat;",
									"",
									"pm.test(\"Check for segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"// Check Segments",
									"segments.forEach(segmentId => {",
									"    // Check prices",
									"    const prices = jsonSeatMap[segmentId].prices;",
									"    const optionCodes = Object.keys(prices);",
									"",
									"    pm.test(\"Check for prices\", function () {",
									"        pm.expect(optionCodes.length).to.be.above(0);",
									"        optionCodes.forEach(optionCode => {",
									"            const optionPrice = prices[optionCode];",
									"            pm.expect(optionPrice).to.have.all.keys('currency', 'public', 'taxes');",
									"            pm.expect(optionPrice.currency).to.be.a('string');",
									"        });",
									"    });",
									"",
									"    // Check Cabins",
									"    const cabins = jsonSeatMap[segmentId].cabins;",
									"",
									"    pm.test(\"Check for cabins\", function () {",
									"        pm.expect(cabins.length).to.be.above(0);",
									"    });",
									"",
									"    cabins.forEach(cabin => {",
									"        // Check Cabin",
									"        pm.test(`Check for cabin ${cabin.name}`, function () {",
									"            pm.expect(cabin).to.have.all.keys(",
									"                'name',",
									"                'layout',",
									"                'firstRow',",
									"                'lastRow',",
									"                'wingFirst',",
									"                'wingLast',",
									"                'exitRows',",
									"                'seats',",
									"            );",
									"        });",
									"",
									"",
									"        pm.test(`Check for seats in cabin ${cabin.name}`, function () {",
									"            const seats = cabin.seats;",
									"            seats.forEach(seat => {",
									"                // Check mandatory keys",
									"                pm.expect(seat).to.include.all.keys(",
									"                    'number',",
									"                    'available',",
									"                );",
									"",
									"                // Check for seat price if available",
									"                if (seat.available) {",
									"                    pm.expect(seat).to.include.all.keys(",
									"                        'optionCode',",
									"                        'characteristics', // Is optional for non-available seats",
									"                    );",
									"",
									"                    pm.expect(optionCodes).to.include(seat.optionCode);",
									"",
									"                    if (!selectedSeat) {",
									"                        selectedSeat = {",
									"                            ...seat,",
									"                            price: prices[seat.optionCode],",
									"                            segment: segmentId,",
									"                        };",
									"                    }",
									"                }",
									"",
									"            });",
									"        });",
									"    });",
									"",
									"});",
									"",
									"if (selectedSeat) {",
									"    pm.collectionVariables.set('seats', JSON.stringify([selectedSeat]));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id}}/seatmap",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id}}",
								"seatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Glider: Add offer options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var pricingResults = pm.response.json();",
									"let offerPrice = pricingResults.offer.price.public;",
									"",
									"//",
									"pm.test(\"Check for price change\", function () {",
									"    pm.expect(Number(pricingResults.offer.price.public)).to.be.below(Number(pm.variables.get('max_amount')));",
									"});",
									"",
									"pm.collectionVariables.set('amount', pricingResults.offer.price.public);",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('PRICE: passengers >>>>', pm.variables.get('passengers'));",
									"console.log('PRICE: seats >>>>', pm.variables.get('seats'));",
									"",
									"const passengers = JSON.parse(pm.variables.get('passengers'));",
									"",
									"pm.collectionVariables.set(\"selectedOptions\", JSON.stringify(",
									"    (JSON.parse(pm.variables.get('seats') || \"[]\")).map(seat => {",
									"        return {",
									"            code: seat.optionCode,",
									"            seatNumber: seat.number,",
									"            segment: seat.segment,",
									"            passenger: Object.keys(passengers)[0]",
									"        }",
									"    })",
									"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{selectedOptions}}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id}}/price",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id}}",
								"price"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"pm.collectionVariables.set(\"balance\", balance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Make Deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/simulateDeposit",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"simulateDeposit"
							]
						},
						"description": "Create a deposit"
					},
					"response": []
				},
				{
					"name": "Simard: Create Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\",\n  \"creditorOrgId\": \"0x94bf5a57b850a35b4d1d7b59f663ce3a8a76fd9928ef2067cc772fc97fb0ad75\",\n  \"expiration\": \"{{guarantee_expiration}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if (currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// Check deposit has been made",
									"pm.test(\"Check for balance update\", function () {",
									"    pm.expect(Number(balance.total).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.total) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"    pm.expect(Number(balance.reserved).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.reserved) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Glider: Create Order from offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var jsonOrderCreationResult = pm.response.json();",
									"",
									"",
									"pm.test(\"Check for orderId\", function () {",
									"    pm.expect(jsonOrderCreationResult.orderId).to.be.a('string');",
									"    pm.collectionVariables.set('order_id', jsonOrderCreationResult.orderId)",
									"});",
									"",
									"pm.test(\"Check for Currency\", function () {",
									"    pm.expect(jsonOrderCreationResult.order.price.currency).to.be.a('string');",
									"    pm.expect(jsonOrderCreationResult.order.price.currency.length).to.eq(3);",
									"    pm.collectionVariables.set('currency', jsonOrderCreationResult.order.price.currency);",
									"});",
									"",
									"pm.test(\"Check for price amount\", function () {",
									"    pm.collectionVariables.set('amount', jsonOrderCreationResult.order.price.public);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('passengerKey', Object.keys(JSON.parse(pm.variables.get('passengers')))[0]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offerId\": \"{{offer_id}}\",\n  \"guaranteeId\": \"{{guarantee_id}}\",\n  \"passengers\": {\n    \"{{passengerKey}}\": {\n      \"type\": \"ADT\",\n      \"civility\": \"MR\",\n       \"gender\": \"Male\",\n      \"lastnames\": [\n        \"Marley\"\n      ],\n      \"firstnames\": [\n        \"Bob\"\n      ],\n      \"birthdate\": \"1980-03-21T00:00:00Z\",\n      \"contactInformation\": [\n        \"+32123456789\",\n        \"contact@org.co.uk\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/orders/createWithOffer",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"orders",
								"createWithOffer"
							]
						},
						"description": "Create an order from a received offer"
					},
					"response": []
				},
				{
					"name": "Simard: Get Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees/{{guarantee_id}}",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees",
								"{{guarantee_id}}"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// We do the exact comparison because we have made a deposit in between",
									"pm.expect(Number(balance.total).toFixed(2)).to.eq(Number(previousBalance.total).toFixed(2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				}
			],
			"description": "Tests for Flights"
		},
		{
			"name": "F03.Flight Booking instant 1ADT 1INF OneWay",
			"item": [
				{
					"name": "Glider: Search Flight Offers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"travel_date\", oneMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"origin\", \"LHR\");",
									"pm.collectionVariables.set(\"destination\", \"YUL\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonSearchResults = pm.response.json();",
									"var offerIds = Object.keys(jsonSearchResults.offers);",
									"var combinations = Object.keys(jsonSearchResults.itineraries.combinations);",
									"var segments = Object.keys(jsonSearchResults.itineraries.segments);",
									"var pricePlans = Object.keys(jsonSearchResults.pricePlans);",
									"var passengers = Object.keys(jsonSearchResults.passengers);",
									"",
									"",
									"pm.test(\"Check for offers presence\", function () {",
									"    // Check the offers",
									"    pm.expect(offerIds.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Combinations presence\", function () {",
									"    pm.expect(combinations.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments presence\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Price Plans presence\", function () {",
									"    pm.expect(pricePlans.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Passengers presence\", function () {",
									"    pm.expect(passengers.length).to.be.eq(1);",
									"});",
									"",
									"pm.test(\"Check each offer\", function () {",
									"    // Check the offers",
									"    offerIds.forEach(offerId => {",
									"        let offer = jsonSearchResults.offers[offerId];",
									"        let offerFlights = [];",
									"",
									"        // Check price consistency",
									"        let offerPrice = offer.price;",
									"        pm.expect(offerPrice).to.have.property('currency');",
									"        pm.expect(offerPrice).to.have.property('public');",
									"        pm.expect(offerPrice).to.have.property('taxes');",
									"        pm.expect(Number(offerPrice.public)).to.be.above(Number(offerPrice.taxes));",
									"",
									"",
									"        // Check the price plans",
									"        let offerPricePlans = Object.keys(offer.pricePlansReferences);",
									"        pm.expect(offerPricePlans.length).to.be.above(0);",
									"",
									"        offerPricePlans.forEach(offerPricePlanKey => {",
									"            // Check the price plan is in the list",
									"            pm.expect(pricePlans).to.include(offerPricePlanKey);",
									"",
									"            // Check the price plan include a flight list",
									"            pm.expect(offer.pricePlansReferences[offerPricePlanKey]).to.have.property('flights');",
									"            let pricePlanFlights = offer.pricePlansReferences[offerPricePlanKey].flights;",
									"            pm.expect(pricePlanFlights.length).to.be.above(0);",
									"            offerFlights.concat(pricePlanFlights);",
									"        });",
									"",
									"        // Check the flights",
									"        offerFlights.forEach(flightKey => {",
									"            pm.expect(combinations).to.include(flightKey);",
									"        });",
									"",
									"        // Offer expiration should be at least 20 min",
									"        pm.expect(new Date(offer.expiration) - new Date()).to.be.above(20 * 60 * 1000, `Offer ${offerId} expires in less than 20 min`);",
									"",
									"    });",
									"});",
									"",
									"pm.test(\"Check each flight (as one way)\", function () {",
									"    combinations.forEach(combinationKey => {",
									"        let combinationSegments = jsonSearchResults.itineraries.combinations[combinationKey];",
									"",
									"        // Check the combination includes at least one segment",
									"        pm.expect(combinationSegments.length).to.be.above(0);",
									"",
									"        // Check all segments are defined in the segments section",
									"        combinationSegments.forEach(segmentKey => {",
									"            pm.expect(segments).to.include(segmentKey);",
									"        });",
									"",
									"        // Check the reply matches the origin & destination requested",
									"        let firstSegment = jsonSearchResults.itineraries.segments[combinationSegments[0]];",
									"        let lastSegment = jsonSearchResults.itineraries.segments[combinationSegments[combinationSegments.length - 1]];",
									"        pm.expect(firstSegment.origin.iataCode).to.be.eq(pm.variables.get('origin'));",
									"        pm.expect(lastSegment.destination.iataCode).to.be.eq(pm.variables.get('destination'));",
									"",
									"        // Check for consistent itinerary",
									"        if (combinationSegments.length > 1) {",
									"            let previousSegment = firstSegment;",
									"            for (let segmentIndex = 1; segmentIndex < combinationSegments.length; segmentIndex++) {",
									"",
									"                // Get current Segment",
									"                let segmentKey = combinationSegments[segmentIndex];",
									"                let segment = jsonSearchResults.itineraries.segments[segmentKey];",
									"",
									"                // Check that the segment starts where the previous one stopped",
									"                pm.expect(segment.origin.iataCode).to.be.eq(previousSegment.destination.iataCode, `Segments are not continous for flight ${combinationKey}`);",
									"",
									"                // Check the connexion time does not overlap",
									"                pm.expect(new Date(segment.departureTime) - new Date(previousSegment.arrivalTime)).to.be.above(15 * 60 * 1000, `${combinationKey} connexion time is too short`);",
									"",
									"                // Prepare for next iteration",
									"                previousSegment = segment;",
									"            }",
									"        }",
									"",
									"",
									"    });",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"// Select an offer",
									"pm.collectionVariables.set('offer_id', offerIds[0]);",
									"pm.collectionVariables.set('offer_items', JSON.stringify(jsonSearchResults.offers[offerIds[0]].offerItems));",
									"pm.collectionVariables.set('currency', jsonSearchResults.offers[offerIds[0]].price.currency);",
									"pm.collectionVariables.set('amount', jsonSearchResults.offers[offerIds[0]].price.public);",
									"pm.collectionVariables.set('max_amount', Number( Number(pm.variables.get('amount')*1.001)));",
									"pm.collectionVariables.set('passengers', JSON.stringify(jsonSearchResults.passengers));",
									"",
									"//console.log(pm.collectionVariables.get('offer_id'));",
									"//console.log(pm.collectionVariables.get('offer_items'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itinerary\": {\n    \"segments\": [\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"departureTime\": \"{{travel_date}}\"\n      }\n    ]\n  },\n  \"passengers\": [\n    {\n      \"type\": \"ADT\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/search",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"search"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Glider: Get Seat Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"const jsonSeatMap = pm.response.json();",
									"const segments = Object.keys(jsonSeatMap);",
									"let selectedSeat;",
									"",
									"pm.test(\"Check for segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"// Check Segments",
									"segments.forEach(segmentId => {",
									"    // Check prices",
									"    const prices = jsonSeatMap[segmentId].prices;",
									"    const optionCodes = Object.keys(prices);",
									"",
									"    pm.test(\"Check for prices\", function () {",
									"        pm.expect(optionCodes.length).to.be.above(0);",
									"        optionCodes.forEach(optionCode => {",
									"            const optionPrice = prices[optionCode];",
									"            pm.expect(optionPrice).to.have.all.keys('currency', 'public', 'taxes');",
									"            pm.expect(optionPrice.currency).to.be.a('string');",
									"        });",
									"    });",
									"",
									"    // Check Cabins",
									"    const cabins = jsonSeatMap[segmentId].cabins;",
									"",
									"    pm.test(\"Check for cabins\", function () {",
									"        pm.expect(cabins.length).to.be.above(0);",
									"    });",
									"",
									"    cabins.forEach(cabin => {",
									"        // Check Cabin",
									"        pm.test(`Check for cabin ${cabin.name}`, function () {",
									"            pm.expect(cabin).to.have.all.keys(",
									"                'name',",
									"                'layout',",
									"                'firstRow',",
									"                'lastRow',",
									"                'wingFirst',",
									"                'wingLast',",
									"                'exitRows',",
									"                'seats',",
									"            );",
									"        });",
									"",
									"",
									"        pm.test(`Check for seats in cabin ${cabin.name}`, function () {",
									"            const seats = cabin.seats;",
									"            seats.forEach(seat => {",
									"                // Check mandatory keys",
									"                pm.expect(seat).to.include.all.keys(",
									"                    'number',",
									"                    'available',",
									"                );",
									"",
									"                // Check for seat price if available",
									"                if (seat.available) {",
									"                    pm.expect(seat).to.include.all.keys(",
									"                        'optionCode',",
									"                        'characteristics', // Is optional for non-available seats",
									"                    );",
									"",
									"                    pm.expect(optionCodes).to.include(seat.optionCode);",
									"",
									"                    if (!selectedSeat) {",
									"                        selectedSeat = {",
									"                            ...seat,",
									"                            price: prices[seat.optionCode],",
									"                            segment: segmentId,",
									"                        };",
									"                    }",
									"                }",
									"",
									"            });",
									"        });",
									"    });",
									"",
									"});",
									"",
									"if (selectedSeat) {",
									"    pm.collectionVariables.set('seats', JSON.stringify([selectedSeat]));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id}}/seatmap",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id}}",
								"seatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Glider: Add offer options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var pricingResults = pm.response.json();",
									"let offerPrice = pricingResults.offer.price.public;",
									"",
									"//",
									"pm.test(\"Check for price change\", function () {",
									"    pm.expect(Number(pricingResults.offer.price.public)).to.be.below(Number(pm.variables.get('max_amount')));",
									"});",
									"",
									"pm.collectionVariables.set('amount', pricingResults.offer.price.public);",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('PRICE: passengers >>>>', pm.variables.get('passengers'));",
									"console.log('PRICE: seats >>>>', pm.variables.get('seats'));",
									"",
									"const passengers = JSON.parse(pm.variables.get('passengers'));",
									"",
									"pm.collectionVariables.set(\"selectedOptions\", JSON.stringify(",
									"    (JSON.parse(pm.variables.get('seats') || \"[]\")).map(seat => {",
									"        return {",
									"            code: seat.optionCode,",
									"            seatNumber: seat.number,",
									"            segment: seat.segment,",
									"            passenger: Object.keys(passengers)[0]",
									"        }",
									"    })",
									"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{selectedOptions}}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id}}/price",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id}}",
								"price"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"pm.collectionVariables.set(\"balance\", balance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Make Deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/simulateDeposit",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"simulateDeposit"
							]
						},
						"description": "Create a deposit"
					},
					"response": []
				},
				{
					"name": "Simard: Create Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\",\n  \"creditorOrgId\": \"0x94bf5a57b850a35b4d1d7b59f663ce3a8a76fd9928ef2067cc772fc97fb0ad75\",\n  \"expiration\": \"{{guarantee_expiration}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if (currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// Check deposit has been made",
									"pm.test(\"Check for balance update\", function () {",
									"    pm.expect(Number(balance.total).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.total) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"    pm.expect(Number(balance.reserved).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.reserved) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Glider: Create Order from offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var jsonOrderCreationResult = pm.response.json();",
									"",
									"",
									"pm.test(\"Check for orderId\", function () {",
									"    pm.expect(jsonOrderCreationResult.orderId).to.be.a('string');",
									"    pm.collectionVariables.set('order_id', jsonOrderCreationResult.orderId)",
									"});",
									"",
									"pm.test(\"Check for Currency\", function () {",
									"    pm.expect(jsonOrderCreationResult.order.price.currency).to.be.a('string');",
									"    pm.expect(jsonOrderCreationResult.order.price.currency.length).to.eq(3);",
									"    pm.collectionVariables.set('currency', jsonOrderCreationResult.order.price.currency);",
									"});",
									"",
									"pm.test(\"Check for price amount\", function () {",
									"    pm.collectionVariables.set('amount', jsonOrderCreationResult.order.price.public);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('passengerKey', Object.keys(JSON.parse(pm.variables.get('passengers')))[0]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offerId\": \"{{offer_id}}\",\n  \"guaranteeId\": \"{{guarantee_id}}\",\n  \"passengers\": {\n    \"{{passengerKey}}\": {\n      \"type\": \"ADT\",\n      \"civility\": \"MR\",\n       \"gender\": \"Male\",\n      \"lastnames\": [\n        \"Marley\"\n      ],\n      \"firstnames\": [\n        \"Bob\"\n      ],\n      \"birthdate\": \"1980-03-21T00:00:00Z\",\n      \"contactInformation\": [\n        \"+32123456789\",\n        \"contact@org.co.uk\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/orders/createWithOffer",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"orders",
								"createWithOffer"
							]
						},
						"description": "Create an order from a received offer"
					},
					"response": []
				},
				{
					"name": "Simard: Get Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees/{{guarantee_id}}",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees",
								"{{guarantee_id}}"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// We do the exact comparison because we have made a deposit in between",
									"pm.expect(Number(balance.total).toFixed(2)).to.eq(Number(previousBalance.total).toFixed(2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				}
			],
			"description": "Tests for Flights"
		},
		{
			"name": "F04.Flight Booking instant 2ADT 1CHD Return",
			"item": [
				{
					"name": "Glider: Search Flight Offers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"var twoMonthFromNow = new Date((+new Date()) + 2 * 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"travel_date\", oneMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"return_date\", twoMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"origin\", \"LHR\");",
									"pm.collectionVariables.set(\"destination\", \"YVR\");",
									"",
									"const passengers =",
									"  [",
									"    {",
									"      \"type\": \"ADT\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marley\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Bob\"",
									"      ],",
									"      \"birthdate\": \"1980-03-21T00:00:00Z\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"ADT\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marleyyy\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Bobby\"",
									"      ],",
									"      \"birthdate\": \"1980-03-21T00:00:00Z\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"CHD\",",
									"      \"civility\": \"MR\",",
									"      \"gender\": \"Male\",",
									"      \"lastnames\": [",
									"        \"Marleyyy\"",
									"      ],",
									"      \"firstnames\": [",
									"        \"Child\"",
									"      ],",
									"      \"birthdate\": \"2015-03-21\",",
									"      \"contactInformation\": [",
									"        \"+32123456789\",",
									"        \"contact@org.co.uk\"",
									"      ]",
									"    }",
									"  ];",
									"pm.collectionVariables.set(\"passengers\", JSON.stringify(passengers));",
									"",
									"",
									"const passengersTypes = passengers.reduce((acc, passenger) => {",
									"  const ptc = passenger.type;",
									"  if (ptc in acc) {",
									"    acc[ptc].count++;",
									"  } else {",
									"    acc[ptc] = {",
									"      type: ptc,",
									"      count: 1",
									"    }",
									"  }",
									"  return acc;",
									"}, {});",
									"pm.collectionVariables.set(\"passengersTypes\", JSON.stringify(Object.values(passengersTypes)));",
									"pm.variables.set('seats', \"[]\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonSearchResults = pm.response.json();",
									"var offerIds = Object.keys(jsonSearchResults.offers);",
									"var combinations = Object.keys(jsonSearchResults.itineraries.combinations);",
									"var segments = Object.keys(jsonSearchResults.itineraries.segments);",
									"var pricePlans = Object.keys(jsonSearchResults.pricePlans);",
									"var passengers = Object.keys(jsonSearchResults.passengers);",
									"",
									"",
									"pm.test(\"Check for offers presence\", function () {",
									"    // Check the offers",
									"    pm.expect(offerIds.length).to.be.above(0);",
									"",
									"});",
									"",
									"pm.test(\"Check for Combinations presence\", function () {",
									"    pm.expect(combinations.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments presence\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Price Plans presence\", function () {",
									"    pm.expect(pricePlans.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Passengers presence\", function () {",
									"    const definedPassengers = JSON.parse(pm.variables.get(\"passengers\"));",
									"    console.log('definedPassengers >>>', definedPassengers);",
									"",
									"    //Apply defined passengers to the provided keys",
									"    let indexedPassengers = definedPassengers.reduce((acc, pax) => {",
									"        // Search a key with correct passenger type",
									"        for (let paxIndex = 0; paxIndex < passengers.length; paxIndex++) {",
									"            let key = passengers[paxIndex];",
									"            if (jsonSearchResults.passengers[key].type == pax.type) {",
									"                // Only add if the key is not used yet",
									"                if (!(key in acc)) {",
									"                    acc[key] = pax;",
									"                    return acc;",
									"                }",
									"            }",
									"        }",
									"    }, {});",
									"",
									"    pm.collectionVariables.set(\"indexedPassengers\", JSON.stringify(indexedPassengers));",
									"    //console.log(indexedPassengers);",
									"});",
									"",
									"",
									"// Check the offers",
									"offerIds.forEach(offerId => {",
									"    let offer = jsonSearchResults.offers[offerId];",
									"    let offerFlights = [];",
									"",
									"    // Check price consistency",
									"    pm.test(`Offer #${offerId}: Check Price`, function () {",
									"        let offerPrice = offer.price;",
									"        pm.expect(offerPrice).to.have.property('currency');",
									"        pm.expect(offerPrice).to.have.property('public');",
									"        pm.expect(offerPrice).to.have.property('taxes');",
									"        pm.expect(Number(offerPrice.public)).to.be.above(Number(offerPrice.taxes));",
									"    });",
									"",
									"",
									"    // Check the price plans",
									"    pm.test(`Offer #${offerId}: Check Price Plans`, function () {",
									"        let offerPricePlans = Object.keys(offer.pricePlansReferences);",
									"        pm.expect(offerPricePlans.length).to.be.above(0);",
									"",
									"        offerPricePlans.forEach(offerPricePlanKey => {",
									"            // Check the price plan is in the list",
									"            pm.expect(pricePlans).to.include(offerPricePlanKey);",
									"",
									"            // Check the price plan include a flight list",
									"            pm.expect(offer.pricePlansReferences[offerPricePlanKey]).to.have.property('flights');",
									"            let pricePlanFlights = offer.pricePlansReferences[offerPricePlanKey].flights;",
									"            pm.expect(pricePlanFlights.length).to.be.above(0);",
									"            offerFlights.concat(pricePlanFlights);",
									"        });",
									"    });",
									"",
									"    // Check the flights",
									"    pm.test(`Offer #${offerId}: Check Flight Presence`, function () {",
									"        offerFlights.forEach(flightKey => {",
									"            pm.expect(combinations).to.include(flightKey);",
									"        });",
									"    });",
									"",
									"    // Offer expiration should be at least 20 min",
									"    pm.test(`Offer #${offerId}: Check Flight Presence`, function () {",
									"        pm.expect(new Date(offer.expiration) - new Date()).to.be.above(20 * 60 * 1000, `Offer ${offerId} expires in less than 20 min`);",
									"    });",
									"",
									"});",
									"",
									"",
									"// Chech Combinations",
									"let nbOutbound = 0;",
									"let nbInbound = 0;",
									"combinations.forEach(combinationKey => {",
									"    let combinationSegments = jsonSearchResults.itineraries.combinations[combinationKey];",
									"",
									"    pm.test(`Flight #${combinationKey}: Check combinations`, function () {",
									"",
									"        // Check the combination includes at least one segment",
									"        pm.expect(combinationSegments.length).to.be.above(0);",
									"",
									"        // Check all segments are defined in the segments section",
									"        combinationSegments.forEach(segmentKey => {",
									"            pm.expect(segments).to.include(segmentKey);",
									"        });",
									"    });",
									"",
									"    // Check the reply matches the origin & destination requested",
									"    pm.test(`Flight #${combinationKey}: Check Segment continuity`, function () {",
									"        let firstSegment = jsonSearchResults.itineraries.segments[combinationSegments[0]];",
									"        let lastSegment = jsonSearchResults.itineraries.segments[combinationSegments[combinationSegments.length - 1]];",
									"        let journeyOrigin = pm.variables.get('origin');",
									"        let journeyDestination = pm.variables.get('destination');",
									"        let isReturn;",
									"",
									"        // Check if we have a inbound or outbound",
									"        pm.expect(firstSegment.origin.iataCode).to.be.oneOf([journeyOrigin, journeyDestination]);",
									"        if (firstSegment.origin.iataCode == journeyOrigin) {",
									"            pm.expect(lastSegment.destination.iataCode).to.be.eq(journeyDestination);",
									"            isReturn = false;",
									"            nbOutbound++;",
									"        } else if (firstSegment.origin.iataCode == journeyDestination) {",
									"            pm.expect(lastSegment.destination.iataCode).to.be.eq(journeyOrigin);",
									"            isReturn = true;",
									"            nbInbound++;",
									"        }",
									"",
									"        // Check for consistent itinerary",
									"        if (combinationSegments.length > 1) {",
									"            let previousSegment = firstSegment;",
									"            for (let segmentIndex = 1; segmentIndex < combinationSegments.length; segmentIndex++) {",
									"",
									"                // Get current Segment",
									"                let segmentKey = combinationSegments[segmentIndex];",
									"                let segment = jsonSearchResults.itineraries.segments[segmentKey];",
									"",
									"                // Check that the segment starts where the previous one stopped",
									"                pm.expect(segment.origin.iataCode).to.be.eq(previousSegment.destination.iataCode, `Segments are not continous for flight ${combinationKey}`);",
									"",
									"                // Check the connexion time does not overlap",
									"                // pm.expect(new Date(segment.departureTime) - new Date(previousSegment.arrivalTime)).to.be.above(15 * 60 * 1000, `${combinationKey} connexion time is too short`);",
									"",
									"                // Prepare for next iteration",
									"                previousSegment = segment;",
									"            }",
									"        }",
									"    });",
									"",
									"});",
									"",
									"pm.test(`Check we have both inbound and outbound flights`, function () {",
									"    pm.expect(nbOutbound).to.be.above(0);",
									"    pm.expect(nbInbound).to.be.above(0);",
									"});",
									"",
									"// Select an offer for the outbound and one for the inbound",
									"let inboundSelected = false;",
									"let outboundSelected = false;",
									"for (let offerId of offerIds) {",
									"    // Get the flights",
									"    let offer = jsonSearchResults.offers[offerId];",
									"    let pricePlanKeys = Object.keys(offer.pricePlansReferences);",
									"    let flights = [];",
									"    for (let pricePlanKey of pricePlanKeys) {",
									"        flights = flights.concat(offer.pricePlansReferences[pricePlanKey].flights);",
									"    }",
									"",
									"    // If there is more than one flight, it is a return offer ",
									"    // We are not interested in this offer for this test case",
									"    if (flights.length > 1) continue;",
									"",
									"    // Get the segments",
									"    let flightCombinationKey = flights[0];",
									"    let segmentKeys = jsonSearchResults.itineraries.combinations[flightCombinationKey];",
									"",
									"    let segments = [];",
									"    for (let segmentKey of segmentKeys) {",
									"        segments.push(jsonSearchResults.itineraries.segments[segmentKey]);",
									"    }",
									"",
									"    // If the flight is an outbound, select it if not yet done",
									"    if ((segments[0].origin.iataCode == pm.variables.get('origin')) && !outboundSelected) {",
									"        pm.collectionVariables.set('offer_id_outbound', offerId);",
									"        pm.collectionVariables.set('offer_items_outbound', JSON.stringify(jsonSearchResults.offers[offerId].offerItems));",
									"        pm.collectionVariables.set('currency', jsonSearchResults.offers[offerId].price.currency);",
									"        pm.collectionVariables.set('amount_outbound', jsonSearchResults.offers[offerId].price.public);",
									"        outboundSelected = true;",
									"    }",
									"",
									"    // If the flight is an outbound, select it if not yet done",
									"    if ((segments[0].origin.iataCode == pm.variables.get('destination')) && !inboundSelected) {",
									"        pm.collectionVariables.set('offer_id_inbound', offerId);",
									"        pm.collectionVariables.set('offer_items_inbound', JSON.stringify(jsonSearchResults.offers[offerId].offerItems));",
									"        //pm.collectionVariables.set('currency_inbound',jsonSearchResults.offers[offerId].price.currency);",
									"        pm.collectionVariables.set('amount_inbound', jsonSearchResults.offers[offerId].price.public);",
									"        inboundSelected = true;",
									"    }",
									"",
									"    // Stop execution if we found both",
									"    if (outboundSelected && inboundSelected) break;",
									"",
									"}",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"pm.collectionVariables.set('amount', Number(",
									"    Number(pm.variables.get('amount_inbound'))",
									"    + Number(pm.variables.get('amount_outbound'))",
									").toFixed(2));",
									"pm.collectionVariables.set('max_amount', Number(",
									"    Number(pm.variables.get('amount')*1.001)",
									").toFixed(2));",
									"console.log(pm.collectionVariables.get('offer_id_inbound'));",
									"console.log(pm.collectionVariables.get('offer_id_outbound'));",
									"",
									"// Merge the offer items",
									"/*",
									"let offerItems = {",
									"    ...JSON.parse(pm.collectionVariables.get('offer_items_outbound')),",
									"    ...JSON.parse(pm.collectionVariables.get('offer_items_inbound')),",
									"}",
									"pm.variables.set('offer_items', JSON.stringify(offerItems)); */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itinerary\": {\n    \"segments\": [\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"departureTime\": \"{{travel_date}}\"\n      },\n      {\n        \"origin\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{destination}}\"\n        },\n        \"destination\": {\n          \"locationType\": \"airport\",\n          \"iataCode\": \"{{origin}}\"\n        },\n        \"departureTime\": \"{{return_date}}\"\n      }\n    ]\n  },\n  \"passengers\": {{passengersTypes}}\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/search",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"search"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Glider: Get Seat Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"const jsonSeatMap = pm.response.json();",
									"const segments = Object.keys(jsonSeatMap);",
									"let selectedSeat;",
									"",
									"pm.test(\"Check for segments\", function () {",
									"    pm.expect(segments.length).to.be.above(0);",
									"});",
									"",
									"// Check Segments",
									"segments.forEach(segmentId => {",
									"    // Check prices",
									"    const prices = jsonSeatMap[segmentId].prices;",
									"    const optionCodes = Object.keys(prices);",
									"",
									"    pm.test(\"Check for prices\", function () {",
									"        pm.expect(optionCodes.length).to.be.above(0);",
									"        optionCodes.forEach(optionCode => {",
									"            const optionPrice = prices[optionCode];",
									"            pm.expect(optionPrice).to.have.all.keys('currency', 'public', 'taxes');",
									"            pm.expect(optionPrice.currency).to.be.a('string');",
									"        });",
									"    });",
									"",
									"    // Check Cabins",
									"    const cabins = jsonSeatMap[segmentId].cabins;",
									"",
									"    pm.test(\"Check for cabins\", function () {",
									"        pm.expect(cabins.length).to.be.above(0);",
									"    });",
									"",
									"    cabins.forEach(cabin => {",
									"        // Check Cabin",
									"        pm.test(`Check for cabin ${cabin.name}`, function () {",
									"            pm.expect(cabin).to.have.all.keys(",
									"                'name',",
									"                'layout',",
									"                'firstRow',",
									"                'lastRow',",
									"                'wingFirst',",
									"                'wingLast',",
									"                'exitRows',",
									"                'seats',",
									"            );",
									"        });",
									"",
									"",
									"        pm.test(`Check for seats in cabin ${cabin.name}`, function () {",
									"            const seats = cabin.seats;",
									"            seats.forEach(seat => {",
									"                // Check mandatory keys",
									"                pm.expect(seat).to.include.all.keys(",
									"                    'number',",
									"                    'available',",
									"                );",
									"",
									"                // Check for seat price if available",
									"                if (seat.available) {",
									"                    pm.expect(seat).to.include.all.keys(",
									"                        'optionCode',",
									"                        'characteristics', // Is optional for non-available seats",
									"                    );",
									"",
									"                    pm.expect(optionCodes).to.include(seat.optionCode);",
									"",
									"                    if (!selectedSeat) {",
									"                        selectedSeat = {",
									"                            ...seat,",
									"                            price: prices[seat.optionCode],",
									"                            segment: segmentId,",
									"                        };",
									"                        pm.collectionVariables.set('seats', JSON.stringify([selectedSeat]));",
									"                    }",
									"                }",
									"",
									"            });",
									"        });",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id_outbound}},{{offer_id_inbound}}/seatmap",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id_outbound}},{{offer_id_inbound}}",
								"seatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Glider: Price offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var pricingResults = pm.response.json();",
									"let offerPrice = pricingResults.offer.price.public;",
									"",
									"//",
									"pm.test(\"Check for price change\", function () {",
									"    pm.expect(Number(pricingResults.offer.price.public)).to.be.below(Number(pm.variables.get('max_amount')));",
									"});",
									"",
									"pm.collectionVariables.set('amount', pricingResults.offer.price.public);",
									"pm.collectionVariables.set('offer_id', pricingResults.offerId);",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('PRICE: indexedPassengers >>>>', pm.variables.get('indexedPassengers'));",
									"console.log('PRICE: seats >>>>', pm.variables.get('seats'));",
									"",
									"",
									"const passengers = JSON.parse(pm.variables.get('indexedPassengers'));",
									"pm.collectionVariables.set(\"selectedOptions\", JSON.stringify(",
									"    JSON.parse(pm.variables.get('seats') || \"[]\").map(seat => {",
									"        return {",
									"            code: seat.optionCode,",
									"            seatNumber: seat.number,",
									"            segment: seat.segment,",
									"            passenger: Object.keys(passengers)[1]",
									"        }",
									"    })",
									"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{selectedOptions}}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/offers/{{offer_id_outbound}},{{offer_id_inbound}}/price",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"offers",
								"{{offer_id_outbound}},{{offer_id_inbound}}",
								"price"
							]
						},
						"description": "Search for offers"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"pm.collectionVariables.set(\"balance\", balance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Make Deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/simulateDeposit",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"simulateDeposit"
							]
						},
						"description": "Create a deposit"
					},
					"response": []
				},
				{
					"name": "Simard: Create Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\",\n  \"creditorOrgId\": \"0x94bf5a57b850a35b4d1d7b59f663ce3a8a76fd9928ef2067cc772fc97fb0ad75\",\n  \"expiration\": \"{{guarantee_expiration}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if (currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// Check deposit has been made",
									"pm.test(\"Check for balance update\", function () {",
									"    pm.expect(Number(balance.total).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.total) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"    pm.expect(Number(balance.reserved).toFixed(2)).to.eq(",
									"        Number(",
									"            Number(previousBalance.reserved) +",
									"            Number(pm.variables.get(\"amount\"))",
									"        ).toFixed(2)",
									"    );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Glider: Create Order from offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var jsonOrderCreationResult = pm.response.json();",
									"",
									"",
									"pm.test(\"Check for orderId\", function () {",
									"    pm.expect(jsonOrderCreationResult.orderId).to.be.a('string');",
									"    pm.collectionVariables.set('order_id', jsonOrderCreationResult.orderId)",
									"});",
									"",
									"pm.test(\"Check for Currency\", function () {",
									"    pm.expect(jsonOrderCreationResult.order.price.currency).to.be.a('string');",
									"    pm.expect(jsonOrderCreationResult.order.price.currency.length).to.eq(3);",
									"    pm.collectionVariables.set('currency', jsonOrderCreationResult.order.price.currency);",
									"});",
									"",
									"pm.test(\"Check for price amount\", function () {",
									"    pm.collectionVariables.set('amount', jsonOrderCreationResult.order.price.public);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offerId\": \"{{offer_id}}\",\n  \"guaranteeId\": \"{{guarantee_id}}\",\n  \"passengers\": {{indexedPassengers}}\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/orders/createWithOffer",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"orders",
								"createWithOffer"
							]
						},
						"description": "Create an order from a received offer"
					},
					"response": []
				},
				{
					"name": "Simard: Get Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees/{{guarantee_id}}",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees",
								"{{guarantee_id}}"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Simard: Get Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"var balanceJson = pm.response.json();",
									"let currency = pm.variables.get(\"currency\");",
									"let balance;",
									"if(currency in balanceJson) {",
									"    balance = balanceJson[currency];",
									"} else {",
									"    balance = {",
									"        \"available\": \"0.00\",",
									"        \"reserved\": \"0.00\",",
									"        \"total\": \"0.00\"",
									"    };",
									"}",
									"let previousBalance = pm.variables.get(\"balance\");",
									"",
									"// We do the exact comparison because we have made a deposit in between",
									"pm.expect(Number(balance.total).toFixed(2)).to.eq(Number(previousBalance.total).toFixed(2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{SIMARD_URL}}/balances",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				}
			],
			"description": "Tests for Flights"
		},
		{
			"name": "H01.Hotel Booking Basic 1ADT",
			"item": [
				{
					"name": "Glider: Search Hotel Offer by rectangle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 259200000); // + 30 days",
									"var oneMonthFromNowPlusOne = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"checkin_date\", oneMonthFromNow.toISOString());",
									"pm.collectionVariables.set(\"checkout_date\", oneMonthFromNowPlusOne.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonSearchResults = pm.response.json();",
									"",
									"pm.test(\"Check for Offers\", function() {",
									"    var offerIds = Object.keys(jsonSearchResults.offers);",
									"    pm.collectionVariables.set('offer_id', offerIds[0]);",
									"    pm.collectionVariables.set('currency','EUR');",
									"});",
									"",
									"// pm.test(\"Check for offers\", function () {",
									"//     // Check the offers",
									"//     var offerIds = Object.keys(jsonSearchResults.offers);",
									"//     pm.collectionVariables.set('offer_id', offerIds[0]);",
									"//     // var adresses = Object.keys(jsonSearchResults.address);",
									"//     // pm.expect(offerIds.length).to.be.above(0);",
									"",
									"//     // Select an offer",
									"//     // pm.collectionVariables.set('offer_id', offerIds[0]);",
									"//     // pm.collectionVariables.set('address', adresses[0]);",
									"//     // pm.collectionVariables.set('offer_items',JSON.stringify(jsonSearchResults.offers[offerIds[0]].offerItems));",
									"    ",
									"//     var currency = \"EUR\";",
									"//     // let amount = jsonSearchResults.offers[offerIds[0]].price.public;",
									"//     pm.expect(currency).to.be.a('string');",
									"//     pm.expect(currency.length).to.eq(3);",
									"//     pm.collectionVariables.set('currency',currency);",
									"//     pm.collectionVariables.set('amount',amount);",
									"// });",
									"",
									"",
									"pm.test(\"Check for Accomodations\", function () {",
									"    var accommodations = Object.keys(jsonSearchResults.accommodations)",
									"    pm.expect(accommodations.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Price Plans\", function () {",
									"    var pricePlans = Object.keys(jsonSearchResults.pricePlans);",
									"    pm.expect(pricePlans.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Check for Passengers\", function () {",
									"    var passengers = Object.keys(jsonSearchResults.passengers);",
									"    pm.expect(passengers.length).to.be.eq(1);",
									"});",
									"",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"// console.log(Object.keys(jsonSearchResults.offers));",
									"// console.log(pm.collectionVariables.get('offer_id'));",
									"// console.log(pm.collectionVariables.get('address'));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accommodation\": {\n    \"location\": {\n      \"rectangle\": {\n        \"south\": \"55.13\",\n        \"west\": \"10.59\",\n        \"north\": \"69.06\",\n        \"east\": \"24.18\"\n      }\n    },\n    \"arrival\": \"{{checkin_date}}\",\n    \"departure\": \"{{checkout_date}}\"\n  },\n  \"passengers\": [\n    {\n      \"type\": \"ADT\",\n      \"count\": 1\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/searchOffers",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"searchOffers"
							]
						},
						"description": "Search for hotel offers"
					},
					"response": []
				},
				{
					"name": "Simard: Make Deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/simulateDeposit",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"simulateDeposit"
							]
						},
						"description": "Create a deposit"
					},
					"response": []
				},
				{
					"name": "Simard: Create Guarantee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set the travel Date",
									"var oneMonthFromNow = new Date((+new Date()) + 2678400000); // + 31 days",
									"pm.collectionVariables.set(\"guarantee_expiration\", oneMonthFromNow.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonGuaranteeCreationResult = pm.response.json();",
									"",
									"pm.test(\"Get Guarantee ID\", function () {",
									"    pm.collectionVariables.set('guarantee_id',jsonGuaranteeCreationResult.guaranteeId);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMARD_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"{{amount}}\",\n  \"creditorOrgId\": \"0x94bf5a57b850a35b4d1d7b59f663ce3a8a76fd9928ef2067cc772fc97fb0ad75\",\n  \"expiration\": \"{{guarantee_expiration}}\"\n}"
						},
						"url": {
							"raw": "{{SIMARD_URL}}/balances/guarantees",
							"host": [
								"{{SIMARD_URL}}"
							],
							"path": [
								"balances",
								"guarantees"
							]
						},
						"description": "Create a guarantee"
					},
					"response": []
				},
				{
					"name": "Glider: Create Order from offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonOrderCreationResult = pm.response.json();",
									"",
									"",
									"pm.test(\"Check for reservation number\", function () {",
									"    pm.expect(jsonOrderCreationResult.order.response).to.eq('Committed');",
									"    pm.expect(jsonOrderCreationResult.order.reservationNumber).to.eq('64478864');",
									"});",
									"",
									"",
									"// Stop execution if there is an error",
									"if(pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GLIDER_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offerId\": \"{{offer_id}}\",\n  \"guaranteeId\": \"{{guarantee_id}}\",\n  \"passengers\": {\n    \"PAX1\": {\n      \"type\": \"ADT\",\n      \"civility\": \"MR\",\n      \"lastnames\": [\n        \"Marley\"\n      ],\n      \"firstnames\": [\n        \"Bob\"\n      ],\n      \"birthdate\": \"1980-03-21T00:00:00Z\",\n      \"contactInformation\": [\n        \"+32123456789\",\n        \"contact@org.co.uk\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{GLIDER_URL}}/orders/createWithOffer",
							"host": [
								"{{GLIDER_URL}}"
							],
							"path": [
								"orders",
								"createWithOffer"
							]
						},
						"description": "Create an order from a received offer"
					},
					"response": []
				}
			],
			"description": "Basic booking for one adult",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{GLIDER_JWT}}",
						"type": "string"
					}
				]
			}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{GLIDER_JWT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GLIDER_JWT",
			"value": ""
		},
		{
			"key": "GLIDER_URL",
			"value": ""
		},
		{
			"key": "SIMARD_JWT",
			"value": ""
		},
		{
			"key": "SIMARD_URL",
			"value": ""
		},
		{
			"key": "GLIDER_ADMIN_URL",
			"value": ""
		},
		{
			"key": "destination",
			"value": ""
		},
		{
			"key": "origin",
			"value": ""
		},
		{
			"key": "passengers",
			"value": ""
		},
		{
			"key": "passengersTypes",
			"value": ""
		},
		{
			"key": "travel_date",
			"value": ""
		},
		{
			"key": "amount",
			"value": ""
		},
		{
			"key": "currency",
			"value": ""
		},
		{
			"key": "indexedPassengers",
			"value": ""
		},
		{
			"key": "offer_id",
			"value": ""
		},
		{
			"key": "offer_items",
			"value": ""
		},
		{
			"key": "selectedOptions",
			"value": ""
		},
		{
			"key": "guarantee_expiration",
			"value": ""
		},
		{
			"key": "balance",
			"value": ""
		},
		{
			"key": "guarantee_id",
			"value": ""
		},
		{
			"key": "return_date",
			"value": ""
		},
		{
			"key": "amount_inbound",
			"value": ""
		},
		{
			"key": "amount_outbound",
			"value": ""
		},
		{
			"key": "offer_id_inbound",
			"value": ""
		},
		{
			"key": "offer_id_outbound",
			"value": ""
		},
		{
			"key": "offer_items_inbound",
			"value": ""
		},
		{
			"key": "offer_items_outbound",
			"value": ""
		},
		{
			"key": "seats",
			"value": ""
		},
		{
			"key": "passengerKey",
			"value": ""
		},
		{
			"key": "order_id",
			"value": ""
		},
		{
			"key": "max_amount",
			"value": ""
		},
		{
			"key": "checkin_date",
			"value": ""
		},
		{
			"key": "checkout_date",
			"value": ""
		}
	]
}